# -*- mode: cmake -*-

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)

SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(InstallFilesRecursive)
INCLUDE(EnableCoverageReport)
INCLUDE(EnableSlocCount)
INCLUDE(GenerateDoxygen)
INCLUDE(GenerateCppcheck)

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

PROJECT("RSC")

# --- user options ---

OPTION(BUILD_TESTS "Decide if the test suite shall be built or not" ON)
OPTION(BUILD_EXAMPLES "Decide if the examples shall be built or not" ON)

# --- global definitions ---

# version information
SET(RSC_VERSION_MAJOR "0")
SET(RSC_VERSION_MINOR "2")
SET(RSC_VERSION_PATCH "0")
SET(RSC_VERSION "${RSC_VERSION_MAJOR}.${RSC_VERSION_MINOR}.${RSC_VERSION_PATCH}")
SET(RSC_ABI_VERSION "2")

FIND_PACKAGE(Subversion)
SET(RSC_WC_REVISION "archive")
IF(Subversion_FOUND)
    Subversion_WC_INFO(${CMAKE_CURRENT_SOURCE_DIR} RSC)
    MESSAGE(STATUS "Current revision is ${RSC_WC_REVISION}")
ENDIF(Subversion_FOUND)

SET(RSC_NAME "rsc")
SET(RSC_TEST_NAME "rsctest")

SET(RSC_CMAKE_MODULE_PATH "share/cmake/Modules")

SET(GTEST_DIR ${CMAKE_SOURCE_DIR}/3rdparty/gtest-1.5.0)
SET(GTEST_INCLUDE_DIR ${GTEST_DIR}/include)
SET(GMOCK_DIR ${CMAKE_SOURCE_DIR}/3rdparty/gmock-1.5.0)
SET(GMOCK_INCLUDE_DIR ${GMOCK_DIR}/include)
SET(GMOCK_LIBRARY_NAME "gmock")

SET(OUTPUT_PATH ${CMAKE_BINARY_DIR}/build)
SET(ARCHIVE_OUTPUT_PATH ${OUTPUT_PATH})
SET(LIBRARY_OUTPUT_PATH ${OUTPUT_PATH})
SET(EXECUTABLE_OUTPUT_PATH ${OUTPUT_PATH})

# --- global compiler flags ---

INCLUDE(PedanticCompilerWarnings)

IF(WIN32)
    ADD_DEFINITIONS(/D_USE_MATH_DEFINES)
ENDIF()

CHECK_INCLUDE_FILE("sys/types.h" HAVE_TYPES_H)
IF(HAVE_TYPES_H)
    ADD_DEFINITIONS(-DHAVE_TYPES_H)
ENDIF()
CHECK_INCLUDE_FILE("sys/wait.h" HAVE_WAIT_H)
IF(HAVE_WAIT_H)
    ADD_DEFINITIONS(-DHAVE_WAIT_H)
ENDIF()
CHECK_INCLUDE_FILE("unistd.h" HAVE_UNISTD_H)
IF(HAVE_UNISTD_H)
    ADD_DEFINITIONS(-DHAVE_UNISTD_H)
ENDIF()

# decide how to do name demangling
CHECK_INCLUDE_FILE_CXX("cxxabi.h" HAVE_CXXABI_H)
IF(HAVE_CXXABI_H)
    ADD_DEFINITIONS(-DDEMANGLE_GCC)
ELSEIF(MSVC)
    ADD_DEFINITIONS(-DDEMANGLE_MSVC)
ELSE()
    MESSAGE(SEND_ERROR "No demangling solution found for the system.")
ENDIF()

# --- dependency handling ---

SET(Boost_USE_VERSION 1.38 CACHE INTERNAL "Boost Version to use")
SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_LIBS OFF)
ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)

IF(BOOST_ROOT)
  SET(Boost_NO_SYSTEM_PATHS ON)
ENDIF()

FIND_PACKAGE(Boost ${Boost_USE_VERSION} REQUIRED thread filesystem signals)
FIND_PACKAGE(BoostUUID REQUIRED)
INCLUDE_DIRECTORIES(BEFORE SYSTEM ${Boost_INCLUDE_DIRS}
  ${BOOSTUUID_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

# --- source code ---

INCLUDE_DIRECTORIES(BEFORE src ${CMAKE_CURRENT_BINARY_DIR}/src)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(3rdparty)
IF(BUILD_TESTS)
    ADD_SUBDIRECTORY(test)
ENDIF()
IF(BUILD_EXAMPLES)
    ADD_SUBDIRECTORY(examples)
ENDIF()

ADD_SUBDIRECTORY(cmake)

# --- pkgconfig file ---

CONFIGURE_FILE(rsc.pc.in ${CMAKE_BINARY_DIR}/rsc.pc @ONLY)
INSTALL(FILES ${CMAKE_BINARY_DIR}/rsc.pc DESTINATION lib/pkgconfig)

# --- cmake config file ---

SET(LIB_SUFFIX ${CMAKE_SHARED_LIBRARY_SUFFIX})
IF(CMAKE_LINK_LIBRARY_SUFFIX)
    SET(LIB_SUFFIX ${CMAKE_LINK_LIBRARY_SUFFIX})
ENDIF()
CONFIGURE_FILE(RSCConfig.cmake.in ${CMAKE_BINARY_DIR}/RSCConfig.cmake @ONLY)
INSTALL(FILES ${CMAKE_BINARY_DIR}/RSCConfig.cmake DESTINATION share/RSC)

# --- enable unit tests if desired ---

IF(BUILD_TESTS)
    ENABLE_TESTING()
ENDIF()

# --- documentation generation ---

GENERATE_DOXYGEN(VERSION "${RSC_VERSION}")

# --- coverage ---

ENABLE_COVERAGE_REPORT(TARGETS ${RSC_NAME} TESTS ${RSC_TEST_NAME} FILTER "*3rdparty*" "*test/*")

# --- sloccount ---

ENABLE_SLOCCOUNT(FOLDERS src test examples)


# --- cppcheck ---

GENERATE_CPPCHECK(SOURCES src test examples
                          "${CMAKE_CURRENT_BINARY_DIR}/src" "${CMAKE_CURRENT_BINARY_DIR}/test" "${CMAKE_CURRENT_BINARY_DIR}/examples"
                  ENABLE_IDS style)
